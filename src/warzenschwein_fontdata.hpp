// Datei: src/warzenschwein_fontdata.hpp
// 🐭 Maus-Kommentar: Maximale Kompression durch direkte Glyph-Zuordnung via Map. Kein `chars[]`, kein `reinterpret_cast`, keine Iteration. Schneefuchs: „Wenn du weißt, was du willst – nimm’s dir direkt!“

#pragma once
#include <unordered_map>
#include <array>
#include <string>
#include <cstdio>

namespace WarzenschweinFont {

using Glyph = std::array<uint8_t, 12>;

inline const std::unordered_map<char, Glyph> font = {
{'A',{0,0,24,36,66,126,66,66,0,0,0,0}},
{'B',{0,0,124,66,124,66,66,124,0,0,0,0}},
{'C',{0,0,60,66,64,64,66,60,0,0,0,0}},
{'D',{0,0,120,68,66,66,68,120,0,0,0,0}},
{'E',{0,0,126,64,120,64,64,126,0,0,0,0}},
{'F',{0,0,126,64,120,64,64,64,0,0,0,0}},
{'G',{0,0,60,64,64,78,66,60,0,0,0,0}},
{'H',{0,0,66,66,126,66,66,66,0,0,0,0}},
{'I',{0,0,124,16,16,16,16,124,0,0,0,0}},
{'J',{0,0,30,4,4,4,68,56,0,0,0,0}},
{'K',{0,0,66,68,72,112,72,68,0,0,0,0}},
{'L',{0,0,64,64,64,64,64,126,0,0,0,0}},
{'M',{0,0,66,102,90,66,66,66,0,0,0,0}},
{'N',{0,0,66,98,82,74,70,66,0,0,0,0}},
{'O',{0,0,60,66,66,66,66,60,0,0,0,0}},
{'P',{0,0,124,66,66,124,64,64,0,0,0,0}},
{'Q',{0,0,60,66,66,74,68,58,0,0,0,0}},
{'R',{0,0,124,66,66,124,72,68,0,0,0,0}},
{'S',{0,0,60,64,60,2,66,60,0,0,0,0}},
{'T',{0,0,124,16,16,16,16,16,0,0,0,0}},
{'U',{0,0,66,66,66,66,66,60,0,0,0,0}},
{'V',{0,0,66,66,66,66,36,24,0,0,0,0}},
{'W',{0,0,66,66,66,90,90,36,0,0,0,0}},
{'X',{0,0,66,36,24,24,36,66,0,0,0,0}},
{'Y',{0,0,66,36,24,16,16,16,0,0,0,0}},
{'Z',{0,0,126,4,8,16,32,126,0,0,0,0}},
{'a',{0,0,60,2,62,66,66,62,0,0,0,0}},
{'b',{0,0,64,64,92,98,66,124,0,0,0,0}},
{'c',{0,0,60,66,64,64,66,60,0,0,0,0}},
{'d',{0,0,2,2,62,66,66,62,0,0,0,0}},
{'e',{0,0,60,66,126,64,66,60,0,0,0,0}},
{'f',{0,0,28,32,124,32,32,32,0,0,0,0}},
{'g',{0,0,62,66,66,62,2,60,0,0,0,0}},
{'h',{0,0,64,64,92,98,66,66,0,0,0,0}},
{'i',{0,0,16,0,48,16,16,56,0,0,0,0}},
{'j',{0,0,4,0,12,4,4,68,56,0,0,0}},
{'k',{0,0,64,72,80,96,80,72,0,0,0,0}},
{'l',{0,0,48,16,16,16,16,56,0,0,0,0}},
{'m',{0,0,108,82,82,82,82,82,0,0,0,0}},
{'n',{0,0,92,98,66,66,66,66,0,0,0,0}},
{'o',{0,0,60,66,66,66,66,60,0,0,0,0}},
{'p',{0,0,124,66,66,124,64,64,0,0,0,0}},
{'q',{0,0,62,66,66,62,2,2,0,0,0,0}},
{'r',{0,0,92,98,64,64,64,64,0,0,0,0}},
{'s',{0,0,62,64,60,2,2,124,0,0,0,0}},
{'t',{0,0,32,32,124,32,32,30,0,0,0,0}},
{'u',{0,0,66,66,66,66,70,58,0,0,0,0}},
{'v',{0,0,66,66,66,36,36,24,0,0,0,0}},
{'w',{0,0,66,66,82,82,92,40,0,0,0,0}},
{'x',{0,0,66,36,24,24,36,66,0,0,0,0}},
{'y',{0,0,66,66,66,62,2,60,0,0,0,0}},
{'z',{0,0,126,4,8,16,32,126,0,0,0,0}},
{'0',{60,66,70,74,82,98,66,60,0,0,0,0}},
{'1',{16,48,80,16,16,16,16,124,0,0,0,0}},
{'2',{60,66,2,4,8,16,32,126,0,0,0,0}},
{'3',{60,66,2,28,2,2,66,60,0,0,0,0}},
{'4',{4,12,20,36,68,126,4,4,0,0,0,0}},
{'5',{126,64,64,124,2,2,66,60,0,0,0,0}},
{'6',{60,64,64,124,66,66,66,60,0,0,0,0}},
{'7',{126,2,4,8,16,32,32,32,0,0,0,0}},
{'8',{60,66,66,60,66,66,66,60,0,0,0,0}},
{'9',{60,66,66,66,62,2,2,60,0,0,0,0}},
{'.',{0,0,0,0,0,0,0,16,16,0,0,0}},
{',',{0,0,0,0,0,0,0,16,16,32,0,0}},
{'-',{0,0,0,0,0,124,0,0,0,0,0,0}}
};

inline const Glyph& get(char c) {
    static const Glyph empty{};
    auto it = font.find(c);
    return it != font.end() ? it->second : empty;
}

inline std::string toHexString(const Glyph& g) {
    std::string out;
    char buf[5];
    for (auto b : g) {
        std::snprintf(buf, sizeof(buf), "%02X ", b);
        out += buf;
    }
    return out;
}

inline void printGlyph(char c) {
    for (auto row : get(c)) {
        for (int b = 7; b >= 0; --b)
            std::putchar((row & (1 << b)) ? '#' : '.');
        std::putchar('\n');
    }
}

} // namespace WarzenschweinFont
