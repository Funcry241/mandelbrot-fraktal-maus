// MAUS:
// ============================================================================
// Datei: src/settings.hpp
// Central project settings ‚Äî fully documented.
// Policy: All runtime LOG/DEBUG output must be English and ASCII-only.
// Comments hier d√ºrfen Deutsch sein. Referenzen:
//   ‚Äì Otter = vom User inspiriert (Bezug zu Otter)
//   ‚Äì Schneefuchs = von Schwester inspiriert (Bezug zu Schneefuchs)
// Keine Regressionen, keine versteckten Semantik-√Ñnderungen. Werte bleiben identisch.
// Neu (Otter/Schneefuchs): Framerate-Cap (60 FPS) + optionales VSync.
// ============================================================================

#pragma once

namespace Settings {

    // ------------------------------------------------------------------------
    // ForceAlwaysZoom
    // Wirkung:
    //   Erzwingt kontinuierliches Zoomen, unabh√§ngig von Entropie/Kontrast-
    //   Ergebnissen. Dient als ‚ÄûDrift‚Äú-Fallback, damit die Kamera stets Bewegung
    //   zeigt, selbst wenn die Analyse mal kein klares Ziel liefert.
    //
    // Empfehlung (Min..Max):
    //   false .. true  (bool)
    //
    // Erh√∂hung/Reduzierung:
    //   ‚Ä¢ true (Erh√∂hung auf aktiv): Stetige Bewegung, ideal f√ºr Demos und
    //     zur Vermeidung von Stagnation bei flachen Regionen. (Bezug zu Otter)
    //   ‚Ä¢ false (Reduzierung auf aus): Bewegung ergibt sich nur aus den
    //     Analysewerten; kann ‚Äûehrlicher‚Äú, aber auch stoppanf√§lliger sein.
    //
    // Hinweis:
    //   Aktiv lassen, wenn ‚ÄûSilk-Lite‚Äú stets fl√ºssig wirken soll; deaktivieren,
    //   um die Treffg√ºte der Zielsuche zu verifizieren. (Bezug zu Schneefuchs)
    // ------------------------------------------------------------------------
    inline constexpr bool   ForceAlwaysZoom = true;   // ü¶¶ Otter: ‚Äûalways zoom‚Äú

    // ------------------------------------------------------------------------
    // ForcedZoomStep
    // Wirkung:
    //   Multiplikativer Zoomfaktor pro Frame, wenn ForceAlwaysZoom aktiv ist.
    //   Werte < 1.0 zoomen rein, Werte > 1.0 zoomen raus.
    //
    // Empfehlung (Min..Max):
    //   0.90 .. 0.999 (double)
    //   Typisch f√ºr sanften Drift: 0.95 .. 0.985
    //
    // Erh√∂hung/Reduzierung:
    //   ‚Ä¢ N√§her an 1.0 (Erh√∂hung): Langsamer, subtiler Zoom; ruhiger Look.
    //   ‚Ä¢ Richtung 0.90 (Reduzierung): Schneller Zoom; eindrucksvoll, aber
    //     potenziell unruhig und iterationsintensiver. (Bezug zu Otter)
    //
    // Hinweis:
    //   PD-Motion-Planner kann die visuelle Geschwindigkeit zus√§tzlich gl√§tten.
    // ------------------------------------------------------------------------
    inline constexpr double ForcedZoomStep  = 0.97;   // ü¶¶ Otter: smooth & steady

    // ------------------------------------------------------------------------
    // debugLogging
    // Wirkung:
    //   Schaltet gezielte Debug-/Diagnose-Ausgaben im Host/Device-Pfad frei
    //   (Timing, Kernel-Phasen, Indizes, etc.). Laufzeitlogs sind stets EN/ASCII.
    //
    // Empfehlung (Min..Max):
    //   false .. true  (bool)
    //
    // Erh√∂hung/Reduzierung:
    //   ‚Ä¢ true (Erh√∂hung auf aktiv): Mehr Einblick, evtl. leichte FPS-Kosten.
    //   ‚Ä¢ false (Reduzierung auf aus): Ruhiger Lauf, ideal f√ºr Captures/Bench.
    //
    // Hinweis:
    //   Nur aktivieren, wenn du reproduzierbare Fragen kl√§ren willst; sonst aus.
    //   Deterministische, sparsame Device-Logs bevorzugen. (Bezug zu Schneefuchs)
    // ------------------------------------------------------------------------
    inline constexpr bool debugLogging  = false;

    // ------------------------------------------------------------------------
    // performanceLogging
    // Wirkung:
    //   Aktiviert kompakte, periodische Performance-Logs im Hostpfad:
    //   ‚Ä¢ Zeiten pro Frame-Phase (map, kernel, unmap, tex, overlays, total)
    //   ‚Ä¢ CUDA-Event-Timings (mandelbrot, entropy, contrast)
    //   ‚Ä¢ FPS, Iterationen, Entropy[0], Contrast[0]
    //
    // Empfehlung (Min..Max):
    //   false .. true  (bool)
    //
    // Erh√∂hung/Reduzierung:
    //   ‚Ä¢ true (Erh√∂hung auf aktiv): Pr√§zise Einblicke in Performance-Hotspots,
    //     minimaler Overhead (~1‚Äì2 % FPS). Ideal zum Priorisieren von Optimierungen.
    //   ‚Ä¢ false (Reduzierung auf aus): Keine Zeitmessungen, maximal sauberes FPS.
    //
    // Hinweis:
    //   Nur f√ºr Messl√§ufe aktivieren. Logs erscheinen als kompakte ASCII-Zeilen,
    //   deterministisch, CSV-freundlich. Flush-Intervall zentral konfigurierbar.
    //   Schneefuchs-Prinzip: Messen, dann abschalten. (Bezug zu Schneefuchs)
    // ------------------------------------------------------------------------
    inline constexpr bool performanceLogging = true;

    // ------------------------------------------------------------------------
    // capFramerate  (NEU)
    // Wirkung:
    //   Aktiviert eine pr√§zise CPU-Seitenratenbegrenzung (sleep+spin), die ‚Äî in
    //   Kombination mit optionalem VSync ‚Äî das Pacing auf eine Ziel-FPS deckelt.
    //   Ziel: glattes 60 FPS-Motion-Feeling unabh√§ngig von Monitor-Hz.
    //
    // Empfehlung (Min..Max):
    //   false .. true (bool)
    //
    // Erh√∂hung/Reduzierung:
    //   ‚Ä¢ true: stabilisiert Bewegungs-Pacing; reduziert Jitter sichtbar. (Otter)
    //   ‚Ä¢ false: volles Tempo (keine Deckelung), geeignet f√ºr Benchmarks.
    //
    // Hinweis:
    //   In Kombination mit preferVSync auf >60 Hz Displays h√§lt der Limiter
    //   die 60er-Taktung, jeder Frame bleibt 2‚Äì3 Refreshes sichtbar. (Schneefuchs)
    // ------------------------------------------------------------------------
    inline constexpr bool capFramerate = true;

    // ------------------------------------------------------------------------
    // capTargetFps  (NEU)
    // Wirkung:
    //   Zieltakt der Framebegrenzung in FPS.
    //
    // Empfehlung (Min..Max):
    //   30 .. 240
    //
    // Erh√∂hung/Reduzierung:
    //   ‚Ä¢ H√∂her: straffere Zielrate, geringere Sleepzeit, potenziell mehr Last.
    //   ‚Ä¢ Niedriger: mehr Ruhezeit ‚Üí weniger Last, aber weniger temporale Aufl√∂sung.
    //
    // Hinweis:
    //   Standard = 60 f√ºr nat√ºrliches Motion-Feeling. (Bezug zu Otter)
    // ------------------------------------------------------------------------
    inline constexpr int capTargetFps = 60;

    // ------------------------------------------------------------------------
    // preferVSync  (NEU)
    // Wirkung:
    //   Setzt beim Start `glfwSwapInterval(1)` f√ºr Tear-freies Rendering.
    //   In Verbindung mit capFramerate wird *vor/um* den Swap getaktet, sodass
    //   bei 120/144 Hz Displays dennoch 60 FPS gezeigt werden (Frames ‚Äûleben‚Äú
    //   dann √ºber mehrere Refreshes).
    //
    // Empfehlung (Min..Max):
    //   false .. true (bool)
    //
    // Erh√∂hung/Reduzierung:
    //   ‚Ä¢ true: Tear-frei, nat√ºrliche Pr√§sentation; etwas h√∂here Latenz m√∂glich.
    //   ‚Ä¢ false: Kein VSync (SwapInterval 0) ‚Äî rein softwareseitiges Pacing.
    //
    // Hinweis:
    //   Bei Messl√§ufen ohne Tearing-Bedarf kann VSync aus. (Bezug zu Schneefuchs)
    // ------------------------------------------------------------------------
    inline constexpr bool preferVSync = true;

    // ------------------------------------------------------------------------
    // heatmapOverlayEnabled
    // Wirkung:
    //   Bestimmt, ob das Heatmap-Overlay beim Programmstart sichtbar ist.
    //
    // Empfehlung (Min..Max):
    //   false .. true  (bool)
    //
    // Erh√∂hung/Reduzierung:
    //   ‚Ä¢ true: Sofortige Diagnose/Analyse im Bild; gut f√ºr Entwicklung.
    //   ‚Ä¢ false: Aufger√§umteres Bild; Overlay bei Bedarf zuschalten.
    //
    // Hinweis:
    //   F√ºr ‚ÄûPfote/Eule‚Äú-Diagnosen sinnvoll zun√§chst aktiv. (Bezug zu Otter)
    // ------------------------------------------------------------------------
    inline constexpr bool heatmapOverlayEnabled = true; 

    // ------------------------------------------------------------------------
    // warzenschweinOverlayEnabled
    // Wirkung:
    //   Schaltet das Warzenschwein-HUD (FPS/Stats/Text) an/aus zum Start.
    //
    // Empfehlung (Min..Max):
    //   false .. true  (bool)
    //
    // Erh√∂hung/Reduzierung:
    //   ‚Ä¢ true: HUD sofort sichtbar (n√ºtzlich beim Tuning).
    //   ‚Ä¢ false: Clean Look; HUD nur auf Anfrage.
    //
    // Hinweis:
    //   F√ºr ‚ÄûWOW-Effekt‚Äú-Style-Checks zu Beginn aktiv lassen. (Bezug zu Otter)
    // ------------------------------------------------------------------------
    inline constexpr bool warzenschweinOverlayEnabled = true; 

    // ------------------------------------------------------------------------
    // hudPixelSize
    // Wirkung:
    //   Skalierung der HUD-Glyphen in NDC-Einheiten pro Pixelquadrat.
    //   Steuert die wahrgenommene Textgr√∂√üe.
    //
    // Empfehlung (Min..Max):
    //   0.0015f .. 0.0040f
    //
    // Erh√∂hung/Reduzierung:
    //   ‚Ä¢ H√∂her: Gr√∂√üerer, pr√§senterer Text (Risiko: Clipping/√úberlagerung).
    //   ‚Ä¢ Niedriger: Dezenter; kann auf hochaufl√∂senden Displays zu klein sein.
    //
    // Hinweis:
    //   An DPI/Fenstergr√∂√üe koppeln, wenn dynamisch ben√∂tigt. (Bezug zu Schneefuchs)
    // ------------------------------------------------------------------------
    inline constexpr float hudPixelSize = 0.0025f;

    // ------------------------------------------------------------------------
    // Fensterkonfiguration (width/height/windowPosX/windowPosY)
    // Wirkung:
    //   Startgr√∂√üe und Startposition des Fensters.
    //
    // Empfehlung (Min..Max):
    //   width :  800 .. 3840
    //   height:  600 .. 2160
    //   Pos   : frei (je nach Multi-Monitor-Setup)
    //
    // Erh√∂hung/Reduzierung:
    //   ‚Ä¢ Gr√∂√üere Fenster: Mehr Pixel ‚Üí h√∂here GPU-Last, klareres Bild.
    //   ‚Ä¢ Kleinere Fenster: H√∂here FPS, geringere Renderlast.
    //
    // Hinweis:
    //   F√ºr reproduzierbare Benchmarks feste Startwerte beibehalten. (Schneefuchs)
    // ------------------------------------------------------------------------
    inline constexpr int width       = 1024;
    inline constexpr int height      = 768;
    inline constexpr int windowPosX  = 100;
    inline constexpr int windowPosY  = 100;

    // ------------------------------------------------------------------------
    // Initialer Fraktal-Ausschnitt (initialZoom, initialOffsetX/Y)
    // Wirkung:
    //   Start-Zoom und -Offset im Komplexraum. Bestimmt den Erst-Eindruck.
    //
    // Empfehlung (Min..Max):
    //   initialZoom   : 0.5f .. 10.0f
    //   initialOffsetX: -2.0f .. +2.0f
    //   initialOffsetY: -2.0f .. +2.0f
    //
    // Erh√∂hung/Reduzierung:
    //   ‚Ä¢ H√∂herer initialZoom: N√§her dran, mehr Detail, h√∂here Iterationskosten.
    //   ‚Ä¢ Niedrigerer initialZoom: Weiterer Blick, schneller, weniger Details.
    //
    // Hinweis:
    //   Aktuelle Defaults liefern einen klassischen Mandelbrot-Frame. (Otter)
    // ------------------------------------------------------------------------
    inline constexpr float initialZoom    = 1.5f;
    inline constexpr float initialOffsetX = -0.5f;
    inline constexpr float initialOffsetY = 0.0f;

    // ------------------------------------------------------------------------
    // Iterationssteuerung (INITIAL_ITERATIONS, MAX_ITERATIONS_CAP)
    // Wirkung:
    //   INITIAL_ITERATIONS: Startbudget der Iterationen pro Pixel.
    //   MAX_ITERATIONS_CAP: Harte Obergrenze gegen Explodieren der Kosten.
    //
    // Empfehlung (Min..Max):
    //   INITIAL_ITERATIONS: 64 .. 1024
    //   MAX_ITERATIONS_CAP: 4096 .. 200000 (GPU/Anspruch abh√§ngig)
    //
    // Erh√∂hung/Reduzierung:
    //   ‚Ä¢ INITIAL_ITERATIONS ‚Üë: Sauberere Kanten, mehr Kosten/FPS-Verlust m√∂glich.
    //   ‚Ä¢ MAX_ITERATIONS_CAP ‚Üë: Tiefere Zoomsch√§rfe; Risiko von Frame-Spikes.
    //   ‚Ä¢ ‚Üì jeweils entsprechend entlastend, aber gr√∂ber.
    //
    // Hinweis:
    //   Bei aggressivem Zoom (ForcedZoomStep klein) Obergrenzen im Blick behalten.
    //   Dokumentationspflicht: Warnung vor Perf-Cliffs. (Bezug zu Schneefuchs)
    // ------------------------------------------------------------------------
    inline constexpr int INITIAL_ITERATIONS = 100;
    inline constexpr int MAX_ITERATIONS_CAP = 50000;

    // ------------------------------------------------------------------------
    // CUDA Tile-Gr√∂√üen (BASE/MIN/MAX_TILE_SIZE)
    // Wirkung:
    //   Steuern die Arbeitsaufteilung in Kacheln f√ºr CUDA-Kernels.
    //   Kachelkanten sollten i. d. R. vielfache von 8 sein (Warp-freundlich).
    //
    // Empfehlung (Min..Max):
    //   BASE_TILE_SIZE: 16 .. 64
    //   MIN_TILE_SIZE :  8 .. BASE_TILE_SIZE
    //   MAX_TILE_SIZE : BASE_TILE_SIZE .. 128
    //
    // Erh√∂hung/Reduzierung:
    //   ‚Ä¢ Gr√∂√üere Tiles: Weniger Launches, potenziell bessere Coalescing-Effekte,
    //     aber ungleichm√§√üige Lastverteilung bei komplexen Regionen m√∂glich.
    //   ‚Ä¢ Kleinere Tiles: Feinere Verteilung, mehr Launch-Overhead/Synchronisation.
    //
    // Hinweis:
    //   In Einklang mit Zoom-Geschwindigkeit und FPS-Zielen tunen. (Bezug zu Otter)
    // ------------------------------------------------------------------------
    inline constexpr int BASE_TILE_SIZE = 32;
    inline constexpr int MIN_TILE_SIZE  = 8;
    inline constexpr int MAX_TILE_SIZE  = 64;

} // namespace Settings
